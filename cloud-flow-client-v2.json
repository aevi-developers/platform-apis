{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"CredentialsConnectionType": {
				"description": "The connection type. Supported values are: ['websocket'].",
				"enum": [
					"websocket"
				],
				"type": "string"
			},
			"CredentialsTokenType": {
				"description": "The type of access token provided. Supported values are: ['jwt'].",
				"enum": [
					"jwt"
				],
				"type": "string"
			},
			"ConnectionCredentials": {
				"description": "Represents connection credentials required to connect to CloudFlow.",
				"properties": {
					"connectionType": {
						"$ref": "#/components/schemas/CredentialsConnectionType",
						"description": "The connection type. Supported values are: ['websocket']."
					},
					"connectionUrl": {
						"type": "string",
						"description": "The websocket URL to connect to."
					},
					"tokenType": {
						"$ref": "#/components/schemas/CredentialsTokenType",
						"description": "The type of access token provided. Supported values are: ['jwt']."
					},
					"accessToken": {
						"type": "string",
						"description": "An access token to use for authentication when connecting to the websocket."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiError": {
				"properties": {
					"errorCode": {
						"type": "string"
					},
					"errorMessage": {
						"type": "string"
					}
				},
				"required": [
					"errorCode",
					"errorMessage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Boolean": {
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"Device": {
				"description": "Represents a CloudFlow device.",
				"properties": {
					"clientAccountId": {
						"type": "string",
						"description": "The id of the client account that this device is registered to.\n\nMust be a string of at least 8 characters. Alpha-numeric, hyphen and underscore characters are allowed."
					},
					"referenceId": {
						"type": "string",
						"description": "The unique reference id for this device.\n\nThis parameter is optional. If not set, CloudFlow will generate a random UUID.\n\nNote that referenceIds are unique across all clients.\nMust be a string of at least 8 characters. Alpha-numeric, hyphen and underscore characters are allowed."
					},
					"serialNumber": {
						"type": "string",
						"description": "The physical unique manufacturers serial number for this device.\n\nMust be at least one character.\n\nTogether with model, must be a unique combination."
					},
					"model": {
						"type": "string",
						"description": "The manufacturers model name for this device.\n\nMust be at least one character.\n\nTogether with serialNumber, must be a unique combination."
					},
					"name": {
						"type": "string",
						"description": "An optional human-readable name for this device.\n\nThis can be used by external clients to display to users.\n\nMust be at least one character.\n\nCloudFlow does not enforce uniqueness for this parameter."
					},
					"location": {
						"type": "string",
						"description": "An optional location assigned for this device.\n\nThis may be used for querying purposes in the CloudFlow API.\n\nMust be at least one character."
					},
					"apiToken": {
						"type": "string",
						"description": "The apiToken associated with the device.\n\nIf not included, one will be autogenerated.\n\nMust be a string of at least 32 characters. Random UUID recommended.\n\nOnly returned by API on device creation."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResultDevices": {
				"properties": {
					"hasMore": {
						"type": "boolean",
						"description": "Flag that specifies whether more data is available to be queried"
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "The limit used in the query"
					},
					"nextPageStartId": {
						"type": "string",
						"description": "The id to use for the next page in the paginated query"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Device"
						},
						"type": "array",
						"description": "Array of entries"
					}
				},
				"required": [
					"hasMore",
					"limit",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DeviceUpdate": {
				"description": "Represents an update to a CloudFlow device.",
				"properties": {
					"name": {
						"type": "string",
						"description": "An optional human-readable name for this device.\n\nThis can be used by external clients to display to users.\n\nMust be at least one character.\n\nCloudFlow does not enforce uniqueness for this parameter."
					},
					"location": {
						"type": "string",
						"description": "An optional location assigned for this device.\n\nThis may be used for querying purposes in the CloudFlow API.\n\nMust be at least one character."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CloudFlowMessage": {
				"properties": {
					"source": {
						"type": "string"
					},
					"target": {
						"type": "string"
					},
					"format": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"version": {
						"type": "string"
					},
					"requestId": {
						"type": "string"
					},
					"originatingRequestId": {
						"type": "string"
					},
					"payload": {}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Version": {
				"description": "Represents CloudFlow versions.",
				"properties": {
					"cloudFlowVersion": {
						"type": "string",
						"description": "The version of CloudFlow itself, in semver v2 format."
					},
					"messageSpecificationVersion": {
						"type": "string",
						"description": "The message specification version, in partial semver v2 format (major.minor)."
					}
				},
				"required": [
					"cloudFlowVersion",
					"messageSpecificationVersion"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OAuthPublicKey": {
				"properties": {
					"kty": {
						"type": "string"
					},
					"use": {
						"type": "string"
					},
					"kid": {
						"type": "string"
					},
					"x5t": {
						"type": "string"
					},
					"x5c": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"n": {
						"type": "string"
					},
					"e": {
						"type": "string"
					}
				},
				"required": [
					"kty",
					"use",
					"kid",
					"x5t",
					"x5c"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConnectedServiceDirection": {
				"enum": [
					"to",
					"from"
				],
				"type": "string"
			},
			"ConnectedService": {
				"properties": {
					"service": {
						"type": "string",
						"description": "The short name of a connected service"
					},
					"baseUrl": {
						"type": "string",
						"description": "The baseUrl of a connected service"
					},
					"direction": {
						"$ref": "#/components/schemas/ConnectedServiceDirection"
					}
				},
				"required": [
					"service",
					"baseUrl",
					"direction"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Connect": {
				"description": "Represents a connect service details.",
				"properties": {
					"service": {
						"type": "string",
						"description": "The short name of this connect service"
					},
					"version": {
						"type": "string",
						"description": "The version number, in semver v2 format."
					},
					"region": {
						"type": "string",
						"description": "The AWS region this service is operating in."
					},
					"stage": {
						"type": "string",
						"description": "The stage for this environment."
					},
					"urlPrefix": {
						"type": "string",
						"description": "The URL prefix used for this environment."
					},
					"scopes": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The scopes this service uses"
					},
					"publicServiceKey": {
						"$ref": "#/components/schemas/OAuthPublicKey",
						"description": "The public key of this service. Used to connect, connect services together"
					},
					"parameters": {
						"description": "Any service specific parameters that should be exposed"
					},
					"connections": {
						"items": {
							"$ref": "#/components/schemas/ConnectedService"
						},
						"type": "array",
						"description": "A list of services that this service is connected to (has a trust relationship with)"
					}
				},
				"required": [
					"service",
					"version",
					"region",
					"stage",
					"urlPrefix"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"apiToken": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "base64({\"accountId\": \"Your CloudFlow account id\", \"apiToken\": \"Your CloudFlow account API token\"})"
			}
		}
	},
	"info": {
		"title": "CloudFlow Client API (v2)",
		"version": "2.0",
		"description": "CloudFlow enables clients to initiate online requests to a connected payment device.",
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/token": {
			"get": {
				"operationId": "clientGetToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConnectionCredentials"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"412": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Retrieve credentials to connect via a websocket.",
				"tags": [
					"client-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [],
				"x-deployment": {
					"functionName": "clientApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/devices/{referenceId}/connected": {
			"get": {
				"operationId": "clientIsDeviceConnected",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Boolean"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Check whether or not a device is connected",
				"tags": [
					"client-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "the referenceIdd of the device",
						"in": "path",
						"name": "referenceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"x-deployment": {
					"functionName": "clientApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/devices": {
			"get": {
				"operationId": "clientGetDevices",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResultDevices"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Returns a list of CloudFlow devices, optionally filtered by query parameters.\n\nBy default, returns all registered devices whether connected or not.\n\nIf no devices are found, an empty array will be returned.",
				"tags": [
					"client-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "A model name to filter devices by",
						"in": "query",
						"name": "model",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The serial number to filter devices by",
						"in": "query",
						"name": "serialNumber",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The location to filter devices by",
						"in": "query",
						"name": "location",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Whether or not to only show devices currently connected via Websocket",
						"in": "query",
						"name": "connectedOnly",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"description": "device referenceId to start the paginated query with",
						"in": "query",
						"name": "nextPageStartId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Limit the number of results returned (default 100)",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"default": 100,
							"format": "double",
							"type": "number"
						}
					}
				],
				"x-deployment": {
					"functionName": "clientApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/devices/{referenceId}": {
			"get": {
				"operationId": "clientGetDevice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Retrieve a device by referenceId.",
				"tags": [
					"client-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The reference id of the device",
						"in": "path",
						"name": "referenceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"x-deployment": {
					"functionName": "clientApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			},
			"patch": {
				"operationId": "clientUpdateDevice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Update the details for a device.",
				"tags": [
					"client-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The device reference id",
						"in": "path",
						"name": "referenceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The device details to update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeviceUpdate",
								"description": "The device details to update"
							}
						}
					}
				},
				"x-deployment": {
					"functionName": "clientApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/initiate": {
			"post": {
				"operationId": "clientInitiate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"410": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"412": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Initiates an asynchronous request over HTTP. In order to call this API the callbackUrl and optionally callbackHeaders for this account must be set.\n\nThe format of the message send is the same as messages sent via the websocket.\n\nResponses to this request will ONLY be sent to the callback URL of the account when received.\n\nIt is not possible to send a request via this API and listen for responses on the websocket connection and vice versa.",
				"tags": [
					"client-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The request to initiate. This must be a valid instance of {@link CloudFlowMessage}.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CloudFlowMessage",
								"description": "The request to initiate. This must be a valid instance of {@link CloudFlowMessage}."
							}
						}
					}
				},
				"x-deployment": {
					"functionName": "clientApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/version": {
			"get": {
				"operationId": "clientGetMessageVersion",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Version"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Returns the version details for this instance.",
				"tags": [
					"client-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [],
				"x-deployment": {
					"functionName": "clientApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "none"
				}
			}
		},
		"/connect": {
			"get": {
				"operationId": "connect",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Connect"
								}
							}
						}
					}
				},
				"description": "Returns details of this CloudFlow service.",
				"tags": [
					"client-endpoint"
				],
				"security": [],
				"parameters": [],
				"x-deployment": {
					"functionName": "clientApi",
					"authorizer": "none",
					"validator": "bodyAndParams"
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}