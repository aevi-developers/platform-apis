{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"ClientAccount": {
				"description": "Represents a CloudFlow Client account.",
				"properties": {
					"accountId": {
						"type": "string",
						"description": "The id of the account.\n\nMust be a string of at least 8 characters. Alpha-numeric, hyphen and underscore characters are allowed."
					},
					"apiToken": {
						"type": "string",
						"description": "The apiToken associated with the account.\n\nThe apiToken is required for interactions with the CloudFlow APIs.\n\nMust be a string of at least 32 characters. Random UUID recommended.\n\nOnly returned by API on account creation and on apiToken update."
					},
					"maxConnections": {
						"type": "number",
						"format": "double",
						"description": "The max number of concurrent websocket connections allowed for this account.\n\nDefault values based on account roles are:\n- partner: 0\n- client: 10\n- device: 1\n\nThe maximum values for clients and devices are:\n- client: 100\n- device: 1",
						"default": 0
					},
					"callbackUrl": {
						"type": "string",
						"description": "A client callback URL to use for asynchronous communication over CloudFlow.\n\nThis is only relevant for client accounts that prefer to initiate transactions asynchronously via HTTP invocation\nrather than bi-directional websocket communication.\n\nHas no effect for admin, partners or devices.\n\nMust be a valid URL.\n\nEnsure to set the relevant headers for this HTTP call via the 'callbackHeaders' field."
					},
					"callbackHeaders": {
						"description": "Headers to set in the request made to the 'callbackUrl' for sending an asynchronous communication response.\n\nNote that it is highly recommended that this includes an Authorization header."
					},
					"entity": {
						"type": "string",
						"description": "An entity to optionally associate with this account.\n\nPartners may query for accounts based on this parameter."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiError": {
				"properties": {
					"errorCode": {
						"type": "string"
					},
					"errorMessage": {
						"type": "string"
					}
				},
				"required": [
					"errorCode",
					"errorMessage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateClientAccount": {
				"description": "Creates a CloudFlow Client account.",
				"properties": {
					"accountId": {
						"type": "string",
						"description": "The id of the account.\n\nMust be a string of at least 8 characters. Alpha-numeric, hyphen and underscore characters are allowed."
					},
					"apiToken": {
						"type": "string",
						"description": "The apiToken associated with the account.\n\nThe apiToken is required for interactions with the CloudFlow APIs.\n\nMust be a string of at least 32 characters. Random UUID recommended.\n\nOnly returned by API on account creation and on apiToken update."
					},
					"maxConnections": {
						"type": "number",
						"format": "double",
						"description": "The max number of concurrent websocket connections allowed for this account.\n\nDefault values based on account roles are:\n- partner: 0\n- client: 10\n- device: 1\n\nThe maximum values for clients and devices are:\n- client: 100\n- device: 1",
						"default": 0
					},
					"callbackUrl": {
						"type": "string",
						"description": "A client callback URL to use for asynchronous communication over CloudFlow.\n\nThis is only relevant for client accounts that prefer to initiate transactions asynchronously via HTTP invocation\nrather than bi-directional websocket communication.\n\nHas no effect for admin, partners or devices.\n\nMust be a valid URL.\n\nEnsure to set the relevant headers for this HTTP call via the 'callbackHeaders' field."
					},
					"callbackHeaders": {
						"description": "Headers to set in the request made to the 'callbackUrl' for sending an asynchronous communication response.\n\nNote that it is highly recommended that this includes an Authorization header."
					},
					"entity": {
						"type": "string",
						"description": "An entity to optionally associate with this account.\n\nPartners may query for accounts based on this parameter."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResultClientAccounts": {
				"properties": {
					"hasMore": {
						"type": "boolean",
						"description": "Flag that specifies whether more data is available to be queried"
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "The limit used in the query"
					},
					"nextPageStartId": {
						"type": "string",
						"description": "The id to use for the next page in the paginated query"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/ClientAccount"
						},
						"type": "array",
						"description": "Array of entries"
					}
				},
				"required": [
					"hasMore",
					"limit",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AccountUpdate": {
				"description": "Represents an update to a CloudFlow account.",
				"properties": {
					"apiToken": {
						"type": "string",
						"description": "The apiToken associated with the account.\n\nThe apiToken is required for interactions with the CloudFlow APIs.\n\nMust be a string of at least 32 characters. Random UUID recommended."
					},
					"entity": {
						"type": "string",
						"description": "An entity to optionally associate with this account.\n\nPartners may query for accounts based on this parameter."
					},
					"callbackUrl": {
						"type": "string",
						"description": "A client callback URL to use for asynchronous communication over CloudFlow.\n\nThis is only relevant for client accounts that prefer to initiate transactions asynchronously via HTTP invocation\nrather than bi-directional websocket communication.\n\nHas no effect for admin, partners or devices.\n\nMust be a valid URL."
					},
					"callbackHeaders": {},
					"maxConnections": {
						"type": "number",
						"format": "double",
						"description": "The max number of concurrent websocket connections allowed for this account.\n\nDefault values based on account roles are:\n- partner: 0\n- client: 10\n- device: 1\n\nThe maximum values for clients and devices are:\n- client: 100\n- device: 1"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DeviceToken": {
				"description": "Represents a CloudFlow device token.",
				"properties": {
					"apiToken": {
						"type": "string",
						"description": "The device API token.\n\nThe apiToken is required for interactions with the CloudFlow APIs.\n\nMust be a string of at least 32 characters. Random UUID recommended."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DeviceSerialNumber": {
				"description": "Represents a device serial number.",
				"properties": {
					"serialNumber": {
						"type": "string",
						"description": "The device API token.\n\nThe apiToken is required for interactions with the CloudFlow APIs.\n\nMust be a string of at least 1 character."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Device": {
				"description": "Represents a CloudFlow device.",
				"properties": {
					"clientAccountId": {
						"type": "string",
						"description": "The id of the client account that this device is registered to.\n\nMust be a string of at least 8 characters. Alpha-numeric, hyphen and underscore characters are allowed."
					},
					"referenceId": {
						"type": "string",
						"description": "The unique reference id for this device.\n\nThis parameter is optional. If not set, CloudFlow will generate a random UUID.\n\nNote that referenceIds are unique across all clients.\nMust be a string of at least 8 characters. Alpha-numeric, hyphen and underscore characters are allowed."
					},
					"serialNumber": {
						"type": "string",
						"description": "The physical unique manufacturers serial number for this device.\n\nMust be at least one character.\n\nTogether with model, must be a unique combination."
					},
					"model": {
						"type": "string",
						"description": "The manufacturers model name for this device.\n\nMust be at least one character.\n\nTogether with serialNumber, must be a unique combination."
					},
					"name": {
						"type": "string",
						"description": "An optional human-readable name for this device.\n\nThis can be used by external clients to display to users.\n\nMust be at least one character.\n\nCloudFlow does not enforce uniqueness for this parameter."
					},
					"location": {
						"type": "string",
						"description": "An optional location assigned for this device.\n\nThis may be used for querying purposes in the CloudFlow API.\n\nMust be at least one character."
					},
					"apiToken": {
						"type": "string",
						"description": "The apiToken associated with the device.\n\nIf not included, one will be autogenerated.\n\nMust be a string of at least 32 characters. Random UUID recommended.\n\nOnly returned by API on device creation."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResultDevices": {
				"properties": {
					"hasMore": {
						"type": "boolean",
						"description": "Flag that specifies whether more data is available to be queried"
					},
					"limit": {
						"type": "number",
						"format": "double",
						"description": "The limit used in the query"
					},
					"nextPageStartId": {
						"type": "string",
						"description": "The id to use for the next page in the paginated query"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Device"
						},
						"type": "array",
						"description": "Array of entries"
					}
				},
				"required": [
					"hasMore",
					"limit",
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DeviceUpdate": {
				"description": "Represents an update to a CloudFlow device.",
				"properties": {
					"name": {
						"type": "string",
						"description": "An optional human-readable name for this device.\n\nThis can be used by external clients to display to users.\n\nMust be at least one character.\n\nCloudFlow does not enforce uniqueness for this parameter."
					},
					"location": {
						"type": "string",
						"description": "An optional location assigned for this device.\n\nThis may be used for querying purposes in the CloudFlow API.\n\nMust be at least one character."
					}
				},
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"apiToken": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "base64({\"accountId\": \"Your CloudFlow account id\", \"apiToken\": \"Your CloudFlow account API token\"})"
			}
		}
	},
	"info": {
		"title": "CloudFlow Partner API (v2)",
		"version": "2.0",
		"description": "CloudFlow partners can manage client accounts and devices.",
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/partner/accounts": {
			"post": {
				"operationId": "partnerCreateAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ClientAccount"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"409": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"417": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Create a new CloudFlow client account.\n\nThe partnerId and accountRole parameters are automatically populated by CloudFlow.\n\naccountId and apiToken can optionally be set. If not set, CloudFlow will populate values for these fields using\nrandom UUIDs.\n\nIf the client will be using asynchronous communication, the callbackUrl must also be specified.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The client account to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateClientAccount",
								"description": "The client account to create"
							}
						}
					}
				},
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			},
			"get": {
				"operationId": "partnerGetAccounts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResultClientAccounts"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Returns a list of CloudFlow client accounts, optionally filtered by query parameters.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "An entity to optionally filter by",
						"in": "query",
						"name": "entity",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "AccountId to start the paginated query with",
						"in": "query",
						"name": "nextPageStartId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Limit the number of results returned (default 100)",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/partner/accounts/{accountId}": {
			"get": {
				"operationId": "partnerGetAccountById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ClientAccount"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Retrieve a CloudFlow client account by id.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The id of the client account to retrieve",
						"in": "path",
						"name": "accountId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			},
			"patch": {
				"operationId": "partnerUpdateAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ClientAccount"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Update a CloudFlow client account.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The id of the client account to update",
						"in": "path",
						"name": "accountId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The account parameters to update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AccountUpdate",
								"description": "The account parameters to update"
							}
						}
					}
				},
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			},
			"delete": {
				"operationId": "partnerDeleteAccount",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ClientAccount"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Delete a CloudFlow client account.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The id of the client account to delete",
						"in": "path",
						"name": "accountId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/partner/device/token/{referenceId}": {
			"put": {
				"operationId": "partnerUpdateDeviceToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeviceToken"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Updates the device API token for the device with the given referenceId.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The referenceId of the device to update the API token for",
						"in": "path",
						"name": "referenceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The device token",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeviceToken",
								"description": "The device token"
							}
						}
					}
				},
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/partner/device/serial-number/{referenceId}": {
			"patch": {
				"operationId": "partnerUpdateDeviceToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeviceSerialNumber"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Updates the device serialNumber for the device with the given referenceId.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The referenceId of the device to update the API token for",
						"in": "path",
						"name": "referenceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The device serialNumber",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeviceSerialNumber",
								"description": "The device serialNumber"
							}
						}
					}
				},
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/partner/devices": {
			"post": {
				"operationId": "partnerCreateDevice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"409": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"417": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Creates a new device and associated device account with a random API token.\n\nThe following fields are mandatory:\n- clientAccountId\n- serialNumber\n- model\n\nIf no referenceId is provided, CloudFlow will assign a random UUID.\n\nOnce the device has been created, the API token can be updated via the partner/device/token/{referenceId} endpoint.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The device data",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Device",
								"description": "The device data"
							}
						}
					}
				},
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			},
			"get": {
				"operationId": "partnerGetDevices",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResultDevices"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Returns a list of CloudFlow devices, optionally filtered by query parameters.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The client accountId to filter devices by",
						"in": "query",
						"name": "clientAccountId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A model name to filter devices by",
						"in": "query",
						"name": "model",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The serial number to filter devices by",
						"in": "query",
						"name": "serialNumber",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "referenceId to start the paginated query with",
						"in": "query",
						"name": "nextPageStartId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Limit the number of results returned (default 100)",
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		},
		"/partner/accounts/{accountId}/devices/{referenceId}": {
			"get": {
				"operationId": "partnerGetDevice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Retrieve a device by its client accountId and referenceId.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The accountId of the client the device is associated with",
						"in": "path",
						"name": "accountId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The reference id of the device",
						"in": "path",
						"name": "referenceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			},
			"patch": {
				"operationId": "partnerUpdateDevice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"417": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Update a CloudFlow device.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The accountId of the client the device is associated with",
						"in": "path",
						"name": "accountId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The reference id of the device",
						"in": "path",
						"name": "referenceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The device details to update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeviceUpdate",
								"description": "The device details to update"
							}
						}
					}
				},
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			},
			"delete": {
				"operationId": "partnerDeleteDevice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Device"
								}
							}
						}
					},
					"401": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"403": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					},
					"404": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiError"
								}
							}
						}
					}
				},
				"description": "Delete a CloudFlow device.",
				"tags": [
					"partner-endpoint"
				],
				"security": [
					{
						"apiToken": []
					}
				],
				"parameters": [
					{
						"description": "The accountId of the client the device is associated with",
						"in": "path",
						"name": "accountId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The reference id of the device",
						"in": "path",
						"name": "referenceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"x-deployment": {
					"functionName": "partnerApi",
					"authorizer": "apiKeyApiAuthorizer",
					"validator": "bodyAndParams"
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}